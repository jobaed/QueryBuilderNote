
/*
ðŸ‘‰ Query Builder Advance Topics
ðŸ‘‰php artisan make:migration set_description_to_text_on_posts_table --table=posts //this is for fulltext index part

ðŸ‘‰ Database Transactions

php artisan migrate:refresh
php artisan tinker
User::factory(20)->create()
App\Models\Post::factory(50)->create()

33. Database Transactions:

DB::transaction(function () {
            DB::table('users')
                ->where('id', 1)
                ->decrement('balance', 20);

            DB::table('users')
                ->where('id', 2)
                ->increment('balance', 20);
        });

34. Pessimistic Locking :

  DB::transaction(function () {

ðŸ‘‰way1
            DB::table('users')
                ->where('id', 1)
                ->lockForUpdate()
                ->decrement('balance', 100);

            DB::table('users')
                ->where('id', 2)
                ->lockForUpdate()
                ->increment('balance', 100);

ðŸ‘‰way2

             DB::table('users')
              ->where('id', 1)
              ->sharedLock()
              ->decrement('balance', 100);

        });

35. ðŸ‘‰ Chunking Data
ðŸ‘‰The chunk() method retrieves data in smaller more manageable "chunks" rather than
getting all data and chunking it afterwards

 DB::table('posts')
            ->orderBy('id')
            ->chunk(150, function($posts) {
                foreach ($posts as $post) {
                    echo $post->title;
                }
            });

36. ðŸ‘‰ Streaming Results Lazily

 ðŸ‘‰ lazy():The lazy() method is used to retrieve a large number of records without overwhelming
the server's memory

        DB::table('posts')
            ->orderBy('id')
            ->lazy()->each(function($post) {
                echo $post->title;
            });


ðŸ‘‰ lazilyById()

        DB::table('posts')
            ->where('id', 1)
            ->lazyById()
            ->first();

37.ðŸ‘‰Raw Methods:

ðŸ‘‰ selectRaw()
        DB::table('posts')
            ->selectRaw('count(*) as post_count')
            ->first();

ðŸ‘‰ whereRaw()
        DB::table('posts')
            ->whereRaw('created_at > NOW() - INTERVAL 1 DAY')
            ->get();

ðŸ‘‰ havingRaw()
        DB::table('posts')
            ->select('user_id', DB::raw('SUM(min_to_read) as total_time'))
            ->groupBy('user_id')
            ->havingRaw('SUM(min_to_read) > 10')
            ->get();

ðŸ‘‰orderByRaw()
        DB::table('posts')
            ->orderByRaw('created_at DESC')
            ->get();

ðŸ‘‰groupByRaw()
        DB::table('posts')
            ->select('user_id', DB::raw('AVG(rating) as avg_rating'))
            ->groupByRaw('user_id')
            ->get();
38. ðŸ‘‰ Ordering through the query builder:

ðŸ‘‰The orderBy() method allows you to sort your query results by a specific column
in ascending or descending order.
ðŸ‘‰The latest() and oldest() methods allows you to sort your query results by the
created_at timestamp in descending and ascending order

ðŸ‘‰one orderBy()
        DB::table('posts')
            ->orderBy('title', 'desc')
            ->get();

ðŸ‘‰ multiple orderBy() methods
        DB::table('posts')
            ->orderBy('title')
            ->orderBy('min_to_read')
            ->get();

ðŸ‘‰latest()
        DB::table('posts')
            ->latest()
            ->get();

ðŸ‘‰oldest()
        DB::table('posts')
            ->oldest()
            ->get();


39. ðŸ‘‰ Full text Indexes :

    ðŸ‘‰ We have the wherefulltext() and orWhereFullText() methods, which both are
       used to add full text "where" clauses to a query for columns that have
       full text indexes.

    ðŸ‘‰ "Natural Language Mode" is a feature of full text search that allows
       users to search for words or phrases using natural language syntax.

    ðŸ‘‰ php artisan make:migration set_description_to_text_on_posts_table --table=posts

 ðŸ‘‰ whereFullText()
        DB::table('posts')
            ->whereFullText('description', 'quo')
            ->get();

ðŸ‘‰ orWhereFullText()
        DB::table('posts')
            ->whereFullText('description', 'quo')
            ->orWhereFullText('description', 'Doloribus')
            ->get();

40.ðŸ‘‰ Limit and Offset through query builder :
ðŸ‘‰ The limit() method is used to limit the number of records that are
returned from a query.
ðŸ‘‰ The offset() method is used to skip a specified number of records from
the begining of a query.

ðŸ‘‰limit()

        DB::table('posts')->limit(10)->get();

ðŸ‘‰ offset()

        DB::table('posts')->offset(10)->limit(10)->get();


41.ðŸ‘‰ Conditional Clause :
ðŸ‘‰  DB::table('posts')
            ->when(function ($query) {
                return $query->where('is_published', true);
            })->get();



42.ðŸ‘‰Removing Existing Ordering :
ðŸ‘‰$posts = DB::table('posts')
            ->orderBy('is_published');

        $unorderedPosts = $posts->reorder()->get();

        dd($unorderedPosts);


ðŸ‘‰  $posts = DB::table('posts')
            ->orderBy('is_published');

$unorderedPosts = $posts->reorder('title', 'desc')->get();
    dd($unorderedPosts);

42. ðŸ‘‰ Paginate Method
ðŸ‘‰$posts = DB::table( 'posts' )->paginate( 10 );
  dd($posts);

ðŸ‘‰ $posts = DB::table( 'posts' )->paginate( 10, ['*'], 'p', 1 );
dd($posts);

ðŸ‘‰ $posts = DB::table( 'posts' )->paginate( 10, ['*'], 'p', 1 );

   return view( 'posts.index', compact( 'posts' ) );

ðŸ‘‰ $posts = DB::table( 'posts' )->paginate( 10);

   return view( 'posts.index', compact( 'posts' ) );


43.ðŸ‘‰simplePaginate() Method :

ðŸ‘‰ $posts = DB::table('posts')->simplePaginate(10);

        return view('posts.index', compact('posts'));


44.ðŸ‘‰ cursorPaginate() Method :

ðŸ‘‰$posts = DB::table('posts')
            ->orderBy('id')
            ->cursorPaginate(10);

        return view('posts.index', compact('posts'));


*/